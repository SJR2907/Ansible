âœ… Real-Time Shell Scripting Examples Using awk, sed, and grep
ðŸ”¹ Example 1: Extract CPU Usage from top Command
#!/bin/bash

# Get CPU usage using top, filter with grep, clean with sed, extract with awk
cpu_usage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{ print 100 - $1 }')

echo "Current CPU Usage: $cpu_usage%"
ðŸ§  What it does:

top -bn1: Runs top in batch mode once.

grep "Cpu(s)": Filters the CPU line.

sed: Extracts the idle percentage.

awk: Subtracts idle from 100 to get usage.

ðŸ”¹ Example 2: Remove Blank Lines & Comments from Config File
#!/bin/bash

input_file="config.txt"

# Remove empty lines and lines starting with #
grep -v '^#' "$input_file" | sed '/^$/d' > cleaned_config.txt

echo "Cleaned config saved to cleaned_config.txt"
ðŸ”¹ Example 3: Parse /etc/passwd and Print Users with UID â‰¥ 1000
#!/bin/bash

awk -F: '$3 >= 1000 { print $1, $3 }' /etc/passwd
ðŸ“Œ Adds a simple user report.

ðŸ”¹ Example 4: Replace Text in File Using sed and Report with awk
#!/bin/bash

# Replace all "dev" with "prod" in config.txt
sed -i 's/dev/prod/g' config.txt

# Count number of lines and print a summary
awk 'END { print "Total lines in config.txt: ", NR }' config.txt
ðŸ”¹ Example 5: Monitor Specific Log Entries (Real-Time)

#!/bin/bash

log_file="/var/log/syslog"

# Monitor errors using tail + grep + awk
tail -f "$log_file" | grep --line-buffered "error" | awk '{ print strftime("[%Y-%m-%d %H:%M:%S]"), $0 }'
ðŸ§  This gives timestamped real-time error logs.

ðŸ”§ Combine All Three in One Script (Mini-Tool)
#!/bin/bash

log_file="access.log"

# Remove blank lines, filter for 404 errors, and extract IPs
grep "404" "$log_file" | sed '/^$/d' | awk '{ print $1 }' | sort | uniq -c | sort -nr
ðŸ‘† Real use-case: Analyze web access logs for 404 errors by IP.

